---
title: "Homework 3"
author: "Kai Suzuki"
date: "2025-06-11"
format: 
  html:
    toc: true
    toc-depth: 12
---

[Link to Repository](https://github.com/kai-s-suzuki/ENVS-193DS_spring-2025_final)

```{r packages, message=FALSE}
library(tidyverse)
library(here)
library(janitor)
library(DHARMa)
library(MuMIn)
library(gt)
library(xfun)
library(ggeffects)
sst <- read_csv("../data/SST_update2023.csv") # reading data for problem 2
nest_boxes <- read_csv("../data/occdist.csv") # reading in data from article for problem 3
```

# Problem 1. Research writing

## a. 
In part 1, my co-worker used a linear model, likely a test finding the Pearson correlation coefficient based on the continuous values. In part 2, a one-way ANOVA test was likely used, as they are looking for one continuous variable being different between multiple sources. 

## b. 
In part 2, they could have shown us the variances of each source and ran a Tukey's honest significance test. Showing the variances between the different sources can explain whether the test assumed equal variances or not; if the variances are similar--within four times of each other as a gut test, it would change the perception of the information. A Tukey's HSD test run after would then tell us which sources were different from each other. 

## c. 
There is a *[small/moderate/large] [positive/negative]* relationship between distance from headwater (km) and annual total nitrogen load (kg year^-1) (*Pearson's r = [correlation coefficient]*, p = 0.03, *$\alpha$ = [significance level]*).

There is a *[small/moderate/large]* difference *(n^2 = [effect size])* in average nitrogen load (kg year^-1) between sources (urban land, atmospheric deposition, fertilizer, wastewater treatment, grasslands) (*one-way ANOVA, F([degrees of freedom between groups], [degrees of freedom within groups]) = [F-statistic]*, p = 0.02, *$\alpha$ = [significance level]*).

# Problem 2. Data visualization

## a. 

```{r message = FALSE}
# data wrangling
sst_clean <- sst |> # starting with the sst data frame
  filter(year(date) >=2018) |> # filtering to only include dates with year at or after 2018
  mutate(year = year(date), # adding a year column
         year = as_factor(year),
        month = month(date, label = TRUE), # adding a month column, with letters (Jan) instead of numbers (1)
        month = as_factor(month)) |> # making months a factor with 12 variables
    group_by(year, month) |> # grouping by month and year to allow data to be summarized
  summarize(mean_monthly_sst = round(mean(temp), 1)) # finding the mean sea surface temperatures of every measurement taken in each month in the data frame, rounded to one decimal place

sst_clean |> # starting with the sst_clean data frame
  ungroup() |> # ungrouping so that sliced samples are not taken for each year
slice_sample(n = 5) # slicing 5 samples from any five months

str(sst_clean) # looking at underlying data and factors
```

## b.
```{r warning = FALSE}
ggplot(data = sst_clean, # starting with the sst_clean dataframe
    aes(x = month, # setting x axis as month
         y = mean_monthly_sst, # setting y axis as mean sea surface temperature
        color = year, # coloring by year
        group = year)) + # grouping by year (connects points for each year)
  geom_point() + # adding each data point
  geom_line() + # connecting points
  scale_color_manual(values = c("2018" = "#86dfa2", # coloring 2018 as the lightest green
                                "2019" = "#71d290", # coloring 2019 as a slightly darker green than 2018
                                "2020" = "#55bb76", # coloring 2020 as a slightly darker green than 2019
                                "2021" = "#42ab64", # coloring 2021 as a slightly darker green than 2020
                                "2022" = "#197236", # coloring 2022 as a slightly darker green than 2021
                                "2023" = "#105827")) + # coloring 2023 as the darkest green
  labs(x = "Month", # labeling the x axis as "Month"
       y = "Mean monthly sea surface temperature (Â°C)", # labeling the y axis
       color = "Year") + # relabeling the legend to "Year"
  theme_bw() + # using black and white ggplot theme
  theme(legend.position = c(0.1, 0.7), # moving legend position to inside graph
        panel.grid.major = element_blank(), # removing major lines, which are vertical lines and some of the horizontal
        panel.grid.minor = element_blank() # removing minor lines, which are horizontal
  ) + 
  scale_y_continuous( # changing the scale of the graph
    breaks = seq(14, 20, by = 2), # matching given visualization, with ticks at 14 through 20
    limits = c(12.4,19.65)) # manually setting the min and max of the y-axis, adjusting so that '20' is aligned with the top of the graph and the lowest point is appropriately displayed and settled at the bottom
```

# Problem 3. Data analysis

## a. 

Biologically, a '0' in either the 'sp', 'cs', or 'tm' columns, means that the box was either unoccupied, or a different bird species occupied the box; a '0' in the 'e' column means that the box was occupied by any bird. 
A '1' in either the 'sp', 'cs', or 'tm' columns means that the box was occupied by one or more of that bird species; a '1' in the 'e' column means that the box was unoccupied by any bird. 

## b. 

In the context of this study, Swift Parrots are the target species for occupants of these bird boxes, as they are picky in terms of nesting locations compared to the Common Starling and Tree Martins. Neither species is particularly dominant over the other, but the Swift Parrot has suffered the most due to its selective behavior and requires the most attention in terms of conservation. 

## c. 

The 2016 'season' represents the first year of the study that coincided with a tree blooming event, where the boxes were deployed for the first time at the location. The 2019 'season' represents another tree blooming event, with the boxes left with uncertainty of whether the parrots would return to the same location for nesting. 

## d. 

| Model number | Season | Distance to Forest Edge |        Model Description     |  
|:------------:|:------:|:-----------------------:|:----------------------------:|
| 0            |        |                         |  no predictors (null model)  |
| 1            |  X     |            X            |  all predictors (sat model)  | 
| 2            |  X     |                         |      Season only             |   
| 3            |        |            X            | Distance to Forest Edge only |    

## e. 

```{r}
nest_boxes_clean <- nest_boxes |> # starting with the nest_boxes dataframe
  clean_names() |> # cleaning names
  select(box_occupant, edge_distance, season, sp) # selecting specific rows
```

```{r}
model0 <- glm(sp ~ 1, # linear model without predictors
              data = nest_boxes_clean, # using the clean dataframe
              family = binomial) # binary variable (0/1, unoccupied/occupied)

model1 <- glm(sp ~ season + edge_distance, # linear model of parrot occupancy predicted by season and distance
             data = nest_boxes_clean, # using the clean dataframe
             family = binomial) # binary variable (0/1, unoccupied/occupied)

model2 <- glm(sp ~ season, # linear model of parrot occupancy predicted by season
             data = nest_boxes_clean, # using the clean dataframe
             family = binomial) # binary variable (0/1, unoccupied/occupied)

model3 <- glm(sp ~ edge_distance, # linear model of parrot occupancy predicted by distance
             data = nest_boxes_clean, # using the clean dataframe
             family = binomial) # binary variable (0/1, unoccupied/occupied)
```

## f. 

```{r}
plot(simulateResiduals(model0)) # plotting DHARMa package diagnostics for model 0
plot(simulateResiduals(model1)) # plotting DHARMa package diagnostics for model 1
plot(simulateResiduals(model2)) # plotting DHARMa package diagnostics for model 2
plot(simulateResiduals(model3)) # plotting DHARMa package diagnostics for model 3
```
## g. 

```{r}
AICc(
  model0, 
  model1,
  model2,
  model3 # running Akaike's Information Criterion values for all four models
) |>  
  arrange(AICc) # arrange the AICc values, with the lowest at the top
```

```{r}
gtsummary::tbl_regression(model1, exponentiate = TRUE) # displaying the odds ratios for the model with season and distance, 95% condifence intervals, and p-values/significances
```


The best model as determined by Akaike's Information Criterion (AIC) was the model that includes season and distance as predictors for the response variable of swift parrot occupancy. 

## h. 

```{r}
model_prediction <- ggpredict(model1, terms = c("edge_distance[all]", "season")) # creating an object that predicts the occupancy with 95% confidence based on the distance *and* season
ggplot(nest_boxes_clean, # starting with the clean data frame
       aes(x = edge_distance, # setting the x-axis to represent distance from forest
           y = sp)) + # setting the y-axis to represent occupancy
  geom_point(alpha = 0.4) + # plotting each occurrence with lighter colored dots
  geom_ribbon(data = model_prediction, # setting the new data frame with predictions from model 1 (distance and season)
              aes(x = x, # setting the x axis as x, the real distances of nest boxes from the forest
                  ymin = conf.low, # setting the bottom of the ribbon as the low of the 95% CI
                  ymax = conf.high, # setting the top of the ribbon as the high of the 95% CI
                  fill = group), # filling the two ribbons by the year/season of the predictions
              alpha = 0.4, inherit.aes = FALSE) + # setting lighter colored dots and removing parameters from ggplot call
  geom_line(data = model_prediction, # setting the new data frame with predicitons from model 1 (distance and season)
            aes(x = x, # setting the x axis as x, the real distances of nest boxes from the forest
                y = predicted, # setting the line to fit the predicted occupancies 
                color = group), # coloring the two lines by the year/season of the predictions
            linewidth = 1, inherit.aes = FALSE) + # setting the size of the dot and removing parameters from geom ribbon call
  theme_bw() + # using black and white ggplot theme
  theme(legend.position = c(0.9, 0.7), # moving legend position to inside graph
        panel.grid.major = element_blank(), # removing major lines, which are vertical lines and some of the horizontal
        panel.grid.minor = element_blank() # removing minor lines, which are horizontal
  ) +
  labs(x = "Edge Distance (m)", # renaming the x axis
       y = "Occupancy", # renaming the y axis
       color = "Season", # coloring by season
       fill = "Season") + # filling by season
  scale_color_manual(values = c("2016" = "#233212", # setting color for 2016 line
                                "2019" = "#5a0856")) + # setting color for 2019 line
  scale_fill_manual(values = c("2016" = "#afe5c0", # setting color for 2016 ribbon fill
                             "2019" = "#caa6c8")) # setting color for 2019 ribbon fill

```
## i.

Figure 1: Swift Parrot occupancy is higher at a lower edge distance and during the first nesting season. The figure shows that occupancy (1) is abundant at edge distances below 600m, and less abundant above 600m. The predictor line displays higher expectations of occupancy at every edge distance in 2016 (green) than 2019 (purple). A 95% confidence interval is displayed, along with each individual data point used for the model. 

Source: Stojanovic, D., et al. 2021. Do nest boxes breed the target species or its competitors? A case study of a critically endangered bird. Dryad. https://doi.org/10.5061/dryad.83bk3j9sb (Accessed 2025-06-04). 

```{r}
summary(model1) # displaying the statistics for the model with season and edge distance as predictors.
```
## j. 

```{r}
ggpredict(model1, terms = c("edge_distance[0]", "season[2016]")) # displaying predicted probabilities of swift parrot occupancy using both predictors if edge distance were 0m during 2016.
ggpredict(model1, terms = c("edge_distance [0]", "season[2019]")) # displaying predicted probabilities of swift parrot occupancy using both predictors if edge distance were 0m during 2019.
ggpredict(model1, terms = c("edge_distance[900]", "season[2016]")) # displaying predicted probabilities of swift parrot occupancy using both predictors if edge distance were 900m during 2016.
ggpredict(model1, terms = c("edge_distance [900]", "season[2019]")) # displaying predicted probabilities of swift parrot occupancy using both predictors if edge distance were 900m during 2019.
```

## k. 

Swift Parrot occupancy was predicted to be higher at both a lower edge distance and during the 2016 season--rather than the 2019 season--as a distance of 0 meters had a predicted probability of occupancy of 0.48 (2016) and 0.30 (2019); at a distance of 900 meters the predicted probability was lower, at 0.12 (2016) and 0.06 (2019) (Figure 1). With an increase from 2016 to 2019, the odds of a box being occupied by a swift parrot fall by a factor of 77% (95% CI: [0.62, 0.96], p = 0.022, $\alpha$ = 0.05); With each meter increase in edge distance, the odds of occupancy fall by a factor of 99.8% (95% CI: [0.997, 0.999], p < 0.001, $\alpha$ = 0.05). 

There is an inverse relationship between edge distance and swift parrot occupancy, with a higher chance of occupancy at a lower edge distance. Swift parrot nest occupancy is higher at lower edge distances because the natural habitat of the parrot is in the forest. Parrots would use the boxes that are more convenient to them, which are generally those that are closer to the forest. The other species studied, such as the common starlings, also end up not nesting closer to the forest because they avoid living deep in the forest. 

# Problem 4. Affective and exploratory visualizations

## a.

My visualizations were quite different between the exploratory made for homework 2 and the affective made for homework 3. I decided to change one of the represented variables and ensured the data was in categorical, rather than continuous form. 

Between all my visualizations, I see that one variable (caffeine consumptions in mg) was always incorporated as the y-axis. This was a simple decision because it is a direct factor that the body responds to, rather than something indirect, such as classes. 

The pattern of increased caffeine consumption on days with lower classes, an inverse relationship, is shown in each visualization. These ended up being the same between visualizations even through different sample sizes. The purely statistical visualization compares medians, but I used real caffeine sources in the physical visualization and compared their actual caffeine content. 

Something I considered from feedback in week 9 was that I should consider incorporating the boxplot into the artwork. If I were not finished with my artwork, I may have considered changing the mediums that I used to keep the suggestions, but I was satisfied with my final product. I was hesitant to initially start my visualization, but Grace offered great advice to help get me started. 